{"/home/travis/build/npmtest/node-npmtest-redwire/test.js":"/* istanbul instrument in package npmtest_redwire */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-redwire/lib.npmtest_redwire.js":"/* istanbul instrument in package npmtest_redwire */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_redwire = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_redwire = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-redwire/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-redwire && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_redwire */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_redwire\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_redwire.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_redwire.rollup.js'] =\n            local.assetsDict['/assets.npmtest_redwire.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_redwire.__dirname + '/lib.npmtest_redwire.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-redwire/node_modules/redwire/index.js":"// Generated by CoffeeScript 1.8.0\nmodule.exports = require('./src/redwire');\n","/home/travis/build/npmtest/node-npmtest-redwire/node_modules/redwire/src/redwire.js":"// Generated by CoffeeScript 1.9.2\nvar Bindings, RedWire, TcpProxy, WebProxy, copy,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  slice = [].slice;\n\nBindings = require('./bindings');\n\nWebProxy = require('./web-proxy');\n\nTcpProxy = require('./tcp-proxy');\n\ncopy = function(source, target) {\n  var key, results, value;\n  results = [];\n  for (key in source) {\n    value = source[key];\n    if (typeof value === 'object') {\n      if ((target[key] == null) || typeof target[key] !== 'object') {\n        target[key] = {};\n      }\n      results.push(copy(value, target[key]));\n    } else {\n      results.push(target[key] = value);\n    }\n  }\n  return results;\n};\n\nmodule.exports = RedWire = (function() {\n  function RedWire(options) {\n    this.close = bind(this.close, this);\n    this.getBindings = bind(this.getBindings, this);\n    this.setBindings = bind(this.setBindings, this);\n    this.createNewBindings = bind(this.createNewBindings, this);\n    this.clear = bind(this.clear, this);\n    this.clearTls = bind(this.clearTls, this);\n    this.clearTcp = bind(this.clearTcp, this);\n    this.clearHttpsWs = bind(this.clearHttpsWs, this);\n    this.clearHttpWs = bind(this.clearHttpWs, this);\n    this.clearHttp2 = bind(this.clearHttp2, this);\n    this.clearHttps = bind(this.clearHttps, this);\n    this.clearHttp = bind(this.clearHttp, this);\n    this.removeHttpsWs = bind(this.removeHttpsWs, this);\n    this.removeHttpWs = bind(this.removeHttpWs, this);\n    this.removeHttp2 = bind(this.removeHttp2, this);\n    this.removeHttps = bind(this.removeHttps, this);\n    this.removeHttp = bind(this.removeHttp, this);\n    this.tls = bind(this.tls, this);\n    this.tcp = bind(this.tcp, this);\n    this.httpsWs = bind(this.httpsWs, this);\n    this.httpWs = bind(this.httpWs, this);\n    this.http2 = bind(this.http2, this);\n    this.https = bind(this.https, this);\n    this.http = bind(this.http, this);\n    this.proxyTls = bind(this.proxyTls, this);\n    this.proxyTcp = bind(this.proxyTcp, this);\n    this.proxyWs = bind(this.proxyWs, this);\n    this.proxy = bind(this.proxy, this);\n    this.redirect302relative = bind(this.redirect302relative, this);\n    this.redirect301relative = bind(this.redirect301relative, this);\n    this.redirect302 = bind(this.redirect302, this);\n    this.redirect301 = bind(this.redirect301, this);\n    this.error500 = bind(this.error500, this);\n    this.error404 = bind(this.error404, this);\n    this.cors = bind(this.cors, this);\n    this.loadBalancer = bind(this.loadBalancer, this);\n    this.sslRedirect = bind(this.sslRedirect, this);\n    this.setHost = bind(this.setHost, this);\n    this._options = {\n      http: false,\n      https: false,\n      http2: false,\n      tcp: false,\n      tls: false,\n      proxy: {\n        xfwd: true,\n        prependPath: false\n      },\n      log: {\n        debug: function() {},\n        notice: function() {},\n        error: function(err) {\n          if (err.stack) {\n            return console.error(err.stack);\n          } else {\n            return console.error(err);\n          }\n        }\n      }\n    };\n    copy(options, this._options);\n    this._bindings = this.createNewBindings();\n    if ((this._options.http != null) || (this._options.https != null) || (this._options.http2 != null)) {\n      this._webProxy = new WebProxy(this._options, (function(_this) {\n        return function() {\n          return _this._bindings;\n        };\n      })(this));\n    }\n    if ((this._options.tcp != null) || (this._options.tls != null)) {\n      this._tcpProxy = new TcpProxy(this._options, (function(_this) {\n        return function() {\n          return _this._bindings;\n        };\n      })(this));\n    }\n  }\n\n  RedWire.prototype.setHost = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).setHost.apply(ref, args);\n  };\n\n  RedWire.prototype.sslRedirect = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).sslRedirect.apply(ref, args);\n  };\n\n  RedWire.prototype.loadBalancer = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).loadBalancer.apply(ref, args);\n  };\n\n  RedWire.prototype.cors = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).cors.apply(ref, args);\n  };\n\n  RedWire.prototype.error404 = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).error404.apply(ref, args);\n  };\n\n  RedWire.prototype.error500 = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).error500.apply(ref, args);\n  };\n\n  RedWire.prototype.redirect301 = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).redirect301.apply(ref, args);\n  };\n\n  RedWire.prototype.redirect302 = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).redirect302.apply(ref, args);\n  };\n\n  RedWire.prototype.redirect301relative = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).redirect301relative.apply(ref, args);\n  };\n\n  RedWire.prototype.redirect302relative = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).redirect302relative.apply(ref, args);\n  };\n\n  RedWire.prototype.proxy = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).proxy.apply(ref, args);\n  };\n\n  RedWire.prototype.proxyWs = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._webProxy).proxyWs.apply(ref, args);\n  };\n\n  RedWire.prototype.proxyTcp = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._tcpProxy).proxyTcp.apply(ref, args);\n  };\n\n  RedWire.prototype.proxyTls = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._tcpProxy).proxyTls.apply(ref, args);\n  };\n\n  RedWire.prototype.http = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).http.apply(ref, args);\n  };\n\n  RedWire.prototype.https = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).https.apply(ref, args);\n  };\n\n  RedWire.prototype.http2 = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).http2.apply(ref, args);\n  };\n\n  RedWire.prototype.httpWs = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).httpWs.apply(ref, args);\n  };\n\n  RedWire.prototype.httpsWs = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).httpsWs.apply(ref, args);\n  };\n\n  RedWire.prototype.tcp = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).tcp.apply(ref, args);\n  };\n\n  RedWire.prototype.tls = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).tls.apply(ref, args);\n  };\n\n  RedWire.prototype.removeHttp = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).removeHttp.apply(ref, args);\n  };\n\n  RedWire.prototype.removeHttps = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).removeHttps.apply(ref, args);\n  };\n\n  RedWire.prototype.removeHttp2 = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).removeHttp2.apply(ref, args);\n  };\n\n  RedWire.prototype.removeHttpWs = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).removeHttpWs.apply(ref, args);\n  };\n\n  RedWire.prototype.removeHttpsWs = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (ref = this._bindings).removeHttpsWs.apply(ref, args);\n  };\n\n  RedWire.prototype.clearHttp = function() {\n    return this._bindings.clearHttp();\n  };\n\n  RedWire.prototype.clearHttps = function() {\n    return this._bindings.clearHttps();\n  };\n\n  RedWire.prototype.clearHttp2 = function() {\n    return this._bindings.clearHttp2();\n  };\n\n  RedWire.prototype.clearHttpWs = function() {\n    return this._bindings.clearHttpWs();\n  };\n\n  RedWire.prototype.clearHttpsWs = function() {\n    return this._bindings.clearHttpsWs();\n  };\n\n  RedWire.prototype.clearTcp = function() {\n    return this._bindings.clearTcp();\n  };\n\n  RedWire.prototype.clearTls = function() {\n    return this._bindings.clearTls();\n  };\n\n  RedWire.prototype.clear = function() {\n    return this._bindings.clear();\n  };\n\n  RedWire.prototype.createNewBindings = function() {\n    return new Bindings(this);\n  };\n\n  RedWire.prototype.setBindings = function(bindings) {\n    return this._bindings = bindings;\n  };\n\n  RedWire.prototype.getBindings = function() {\n    return this._bindings;\n  };\n\n  RedWire.prototype.close = function(cb) {\n    var e;\n    try {\n      if (this._webProxy != null) {\n        this._webProxy.close();\n      }\n      if (this._tcpProxy != null) {\n        this._tcpProxy.close();\n      }\n    } catch (_error) {\n      e = _error;\n    }\n    if (cb != null) {\n      return cb();\n    }\n  };\n\n  return RedWire;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-redwire/node_modules/redwire/src/bindings.js":"// Generated by CoffeeScript 1.9.2\nvar Bindings, DispatchNode, UseNode, parse_url,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nparse_url = require('url').parse;\n\nDispatchNode = require('./dispatch-node');\n\nUseNode = require('./use-node');\n\nmodule.exports = Bindings = (function() {\n  function Bindings(redwire) {\n    this.clear = bind(this.clear, this);\n    this.clearTls = bind(this.clearTls, this);\n    this.clearTcp = bind(this.clearTcp, this);\n    this.clearHttpsWs = bind(this.clearHttpsWs, this);\n    this.clearHttpWs = bind(this.clearHttpWs, this);\n    this.clearHttp2 = bind(this.clearHttp2, this);\n    this.clearHttps = bind(this.clearHttps, this);\n    this.clearHttp = bind(this.clearHttp, this);\n    this.removeHttpsWs = bind(this.removeHttpsWs, this);\n    this.removeHttpWs = bind(this.removeHttpWs, this);\n    this.removeHttp2 = bind(this.removeHttp2, this);\n    this.removeHttps = bind(this.removeHttps, this);\n    this.removeHttp = bind(this.removeHttp, this);\n    this.tls = bind(this.tls, this);\n    this.tcp = bind(this.tcp, this);\n    this.httpsWs = bind(this.httpsWs, this);\n    this.httpWs = bind(this.httpWs, this);\n    this.http2 = bind(this.http2, this);\n    this.https = bind(this.https, this);\n    this.http = bind(this.http, this);\n    this._redwire = redwire;\n    this._http = new DispatchNode();\n    this._https = new DispatchNode();\n    this._http2 = new DispatchNode();\n    this._httpWs = new DispatchNode();\n    this._httpsWs = new DispatchNode();\n    this._tcp = new UseNode();\n    this._tls = new UseNode();\n  }\n\n  Bindings.prototype.http = function(url, target) {\n    var result;\n    if (url !== '*' && url.indexOf('http://') !== 0) {\n      url = \"http://\" + url;\n    }\n    result = this._http.match(url);\n    if (target == null) {\n      return result;\n    }\n    if (typeof target === 'string') {\n      return result.use(this._redwire.proxy(target));\n    }\n    if (typeof target === 'function') {\n      return result.use(target);\n    }\n    throw Error('target not a known type');\n  };\n\n  Bindings.prototype.https = function(url, target) {\n    var result;\n    if (url !== '*' && url.indexOf('https://') !== 0) {\n      url = \"https://\" + url;\n    }\n    result = this._https.match(url);\n    if (target == null) {\n      return result;\n    }\n    if (typeof target === 'string') {\n      return result.use(this._redwire.proxy(target));\n    }\n    if (typeof target === 'function') {\n      return result.use(target);\n    }\n    throw Error('target not a known type');\n  };\n\n  Bindings.prototype.http2 = function(url, target) {\n    var result;\n    if (url !== '*' && url.indexOf('https://') !== 0) {\n      url = \"https://\" + url;\n    }\n    result = this._http2.match(url);\n    if (target == null) {\n      return result;\n    }\n    if (typeof target === 'string') {\n      return result.use(this._redwire.proxy(target));\n    }\n    if (typeof target === 'function') {\n      return result.use(target);\n    }\n    throw Error('target not a known type');\n  };\n\n  Bindings.prototype.httpWs = function(url, target) {\n    var result;\n    if (url !== '*' && url.indexOf('http://') !== 0) {\n      url = \"http://\" + url;\n    }\n    result = this._httpWs.match(url);\n    if (target == null) {\n      return result;\n    }\n    if (typeof target === 'string') {\n      return result.use(this._redwire.proxyWs(target));\n    }\n    if (typeof target === 'function') {\n      return result.use(target);\n    }\n    throw Error('target not a known type');\n  };\n\n  Bindings.prototype.httpsWs = function(url, target) {\n    var result;\n    if (url !== '*' && url.indexOf('https://') !== 0) {\n      url = \"https://\" + url;\n    }\n    result = this._httpsWs.match(url);\n    if (target == null) {\n      return result;\n    }\n    if (typeof target === 'string') {\n      return result.use(this._redwire.proxyWs(target));\n    }\n    if (typeof target === 'function') {\n      return result.use(target);\n    }\n    throw Error('target not a known type');\n  };\n\n  Bindings.prototype.tcp = function(target) {\n    if (target == null) {\n      return this._tcp;\n    }\n    if (typeof target === 'string') {\n      return this._tcp.use(this._redwire.proxyTcp(target));\n    }\n    if (typeof target === 'function') {\n      return this._tcp.use(target);\n    }\n    throw Error('target not a known type');\n  };\n\n  Bindings.prototype.tls = function(options, target) {\n    if (target == null) {\n      throw Error('target not defined');\n    }\n    if (typeof target === 'string') {\n      return this._tls.use(this._redwire.proxyTls(target));\n    }\n    if (typeof target === 'function') {\n      return this._tls.use(target);\n    }\n    throw Error('target not a known type');\n  };\n\n  Bindings.prototype.removeHttp = function(url) {\n    return this._http.remove(url);\n  };\n\n  Bindings.prototype.removeHttps = function(url) {\n    return this._https.remove(url);\n  };\n\n  Bindings.prototype.removeHttp2 = function(url) {\n    return this._http2.remove(url);\n  };\n\n  Bindings.prototype.removeHttpWs = function(url) {\n    return this._httpWs.remove(url);\n  };\n\n  Bindings.prototype.removeHttpsWs = function(url) {\n    return this._httpsWs.remove(url);\n  };\n\n  Bindings.prototype.clearHttp = function() {\n    return this._http.clear();\n  };\n\n  Bindings.prototype.clearHttps = function() {\n    return this._https.clear();\n  };\n\n  Bindings.prototype.clearHttp2 = function() {\n    return this._http2.clear();\n  };\n\n  Bindings.prototype.clearHttpWs = function() {\n    return this._httpWs.clear();\n  };\n\n  Bindings.prototype.clearHttpsWs = function() {\n    return this._httpsWs.clear();\n  };\n\n  Bindings.prototype.clearTcp = function() {\n    return this._tcp.clear();\n  };\n\n  Bindings.prototype.clearTls = function() {\n    return this._tls.clear();\n  };\n\n  Bindings.prototype.clear = function() {\n    this.clearHttp();\n    this.clearHttps();\n    this.clearHttp2();\n    this.clearHttpWs();\n    this.clearHttpsWs();\n    this.clearTcp();\n    return this.clearTls();\n  };\n\n  return Bindings;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-redwire/node_modules/redwire/src/dispatch-node.js":"// Generated by CoffeeScript 1.9.2\nvar DispatchNode,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  slice = [].slice;\n\nmodule.exports = DispatchNode = (function() {\n  function DispatchNode(url, createNode) {\n    this.exec = bind(this.exec, this);\n    this._dispatchListeners = bind(this._dispatchListeners, this);\n    this._dispatchHandlers = bind(this._dispatchHandlers, this);\n    this.use = bind(this.use, this);\n    this.clear = bind(this.clear, this);\n    this.remove = bind(this.remove, this);\n    this.match = bind(this.match, this);\n    this._find = bind(this._find, this);\n    if (createNode == null) {\n      createNode = function(url, createNode) {\n        return new DispatchNode(url, createNode);\n      };\n    }\n    this._createNode = createNode;\n    this._url = url;\n    this._handlers = [];\n    this._listeners = [];\n    this._wildcard = null;\n  }\n\n  DispatchNode.prototype._find = function(url) {\n    var i, len, listener, ref;\n    ref = this._listeners;\n    for (i = 0, len = ref.length; i < len; i++) {\n      listener = ref[i];\n      if (listener.url === url) {\n        return listener;\n      }\n    }\n    return null;\n  };\n\n  DispatchNode.prototype.match = function(url) {\n    var listener;\n    if (url === '*') {\n      if (this._wildcard == null) {\n        this._wildcard = this._createNode('*');\n      }\n      return this._wildcard;\n    }\n    listener = this._find(url);\n    if (listener == null) {\n      listener = {\n        url: url,\n        node: this._createNode(url)\n      };\n      this._listeners.push(listener);\n      this._listeners.sort(function(a, b) {\n        return b.url.length - a.url.length;\n      });\n    }\n    return listener.node;\n  };\n\n  DispatchNode.prototype.remove = function(url) {\n    var index, listener;\n    listener = this._find(url);\n    if (listener != null) {\n      index = this._listeners.indexOf(listener);\n      this._listeners.splice(index, 1);\n    }\n    return this;\n  };\n\n  DispatchNode.prototype.clear = function() {\n    this._handlers = [];\n    this._listeners = [];\n    return this._wildcard = null;\n  };\n\n  DispatchNode.prototype.use = function(handler) {\n    var h, i, len;\n    if (Array.isArray(handler)) {\n      for (i = 0, len = handler.length; i < len; i++) {\n        h = handler[i];\n        this.use(h);\n      }\n    } else {\n      this._handlers.push(handler);\n    }\n    return this;\n  };\n\n  DispatchNode.prototype._dispatch = function(items, args, next, method) {\n    var exec, index;\n    items = items.slice(0);\n    index = 0;\n    exec = function() {\n      var item;\n      if (index >= items.length) {\n        return next.apply(null, args);\n      }\n      item = items[index];\n      index++;\n      return method(item, args, exec);\n    };\n    return exec();\n  };\n\n  DispatchNode.prototype._dispatchHandlers = function() {\n    var args, i, next, url;\n    url = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), next = arguments[i++];\n    return this._dispatch(this._handlers, args, next, (function(_this) {\n      return function(item, args, next) {\n        return item.apply(null, [_this._url, url].concat(slice.call(args), [next]));\n      };\n    })(this));\n  };\n\n  DispatchNode.prototype._dispatchListeners = function() {\n    var args, i, next, url;\n    url = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), next = arguments[i++];\n    return this._dispatch(this._listeners, args, next, function(item, args, next) {\n      var ref;\n      if (url.indexOf(item.url) !== 0) {\n        return next();\n      }\n      return (ref = item.node).exec.apply(ref, [url].concat(slice.call(args), [next]));\n    });\n  };\n\n  DispatchNode.prototype.exec = function() {\n    var args, i, next, url;\n    url = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), next = arguments[i++];\n    return this._dispatchHandlers.apply(this, [url].concat(slice.call(args), [(function(_this) {\n      return function() {\n        return _this._dispatchListeners.apply(_this, [url].concat(slice.call(args), [function() {\n          var ref;\n          if (_this._wildcard == null) {\n            return next.apply(null, args);\n          }\n          return (ref = _this._wildcard).exec.apply(ref, [url].concat(slice.call(args), [next]));\n        }]));\n      };\n    })(this)]));\n  };\n\n  return DispatchNode;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-redwire/node_modules/redwire/src/use-node.js":"// Generated by CoffeeScript 1.8.0\nvar DispatchNode,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __slice = [].slice;\n\nmodule.exports = DispatchNode = (function() {\n  function DispatchNode() {\n    this.exec = __bind(this.exec, this);\n    this.clear = __bind(this.clear, this);\n    this.use = __bind(this.use, this);\n    this._handlers = [];\n  }\n\n  DispatchNode.prototype.use = function(handler) {\n    var h, _i, _len;\n    if (Array.isArray(handler)) {\n      for (_i = 0, _len = handler.length; _i < _len; _i++) {\n        h = handler[_i];\n        this.use(h);\n      }\n    } else {\n      this._handlers.push(handler);\n    }\n    return this;\n  };\n\n  DispatchNode.prototype.clear = function() {\n    return this._handlers = [];\n  };\n\n  DispatchNode.prototype.exec = function() {\n    var args, exec, index, items, next, _i;\n    args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), next = arguments[_i++];\n    items = this._handlers.slice(0);\n    index = 0;\n    exec = function() {\n      var item;\n      if (index >= items.length) {\n        return next.apply(null, args);\n      }\n      item = items[index];\n      index++;\n      return item.apply(null, __slice.call(args).concat([exec]));\n    };\n    return exec();\n  };\n\n  return DispatchNode;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-redwire/node_modules/redwire/src/web-proxy.js":"// Generated by CoffeeScript 1.9.2\nvar CertificateStore, LoadBalancer, WebProxy, format_url, http, http2, http_proxy, https, parse_url,\n  bind1 = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  slice = [].slice,\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nhttp = require('http');\n\nhttps = require('https');\n\nhttp2 = require('http2');\n\nhttp_proxy = require('http-proxy');\n\nparse_url = require('url').parse;\n\nformat_url = require('url').format;\n\nCertificateStore = require('./certificate-store');\n\nLoadBalancer = require('./load-balancer');\n\nmodule.exports = WebProxy = (function() {\n  function WebProxy(options, bindings) {\n    this.close = bind1(this.close, this);\n    this.redirect302 = bind1(this.redirect302, this);\n    this._redirect302 = bind1(this._redirect302, this);\n    this.redirect301 = bind1(this.redirect301, this);\n    this._redirect301 = bind1(this._redirect301, this);\n    this._redirectParseRel = bind1(this._redirectParseRel, this);\n    this.redirect302absolute = bind1(this.redirect302absolute, this);\n    this._redirect302absolute = bind1(this._redirect302absolute, this);\n    this.redirect301absolute = bind1(this.redirect301absolute, this);\n    this._redirect301absolute = bind1(this._redirect301absolute, this);\n    this._redirect = bind1(this._redirect, this);\n    this._redirectParseUrl = bind1(this._redirectParseUrl, this);\n    this.error500 = bind1(this.error500, this);\n    this._error500 = bind1(this._error500, this);\n    this.error404 = bind1(this.error404, this);\n    this._error404 = bind1(this._error404, this);\n    this.cors = bind1(this.cors, this);\n    this.sslRedirect = bind1(this.sslRedirect, this);\n    this.loadBalancer = bind1(this.loadBalancer, this);\n    this.setHost = bind1(this.setHost, this);\n    this.proxyWs = bind1(this.proxyWs, this);\n    this.proxy = bind1(this.proxy, this);\n    this._startProxy = bind1(this._startProxy, this);\n    this._startHttp2 = bind1(this._startHttp2, this);\n    this._startHttps = bind1(this._startHttps, this);\n    this._startHttp = bind1(this._startHttp, this);\n    this._translateUrl = bind1(this._translateUrl, this);\n    this._parseHostPort = bind1(this._parseHostPort, this);\n    this._parseSource = bind1(this._parseSource, this);\n    var ref, ref1, ref2;\n    this._options = options;\n    this._bindings = bindings;\n    if (this._options.http) {\n      this._startHttp();\n    }\n    if (this._options.https) {\n      this._startHttps();\n    }\n    if (this._options.http2) {\n      this._startHttp2();\n    }\n    if (this._options.proxy) {\n      this._startProxy();\n    }\n    if (((ref = this._options.http) != null ? ref.routes : void 0) != null) {\n      setTimeout((function(_this) {\n        return function() {\n          var ref1, results, source, target;\n          ref1 = _this._options.http.routes;\n          results = [];\n          for (source in ref1) {\n            target = ref1[source];\n            results.push(_this._bindings().http(source, target));\n          }\n          return results;\n        };\n      })(this), 1);\n    }\n    if (((ref1 = this._options.https) != null ? ref1.routes : void 0) != null) {\n      setTimeout((function(_this) {\n        return function() {\n          var ref2, results, source, target;\n          ref2 = _this._options.https.routes;\n          results = [];\n          for (source in ref2) {\n            target = ref2[source];\n            results.push(_this._bindings().https(source, target));\n          }\n          return results;\n        };\n      })(this), 1);\n    }\n    if (((ref2 = this._options.http2) != null ? ref2.routes : void 0) != null) {\n      setTimeout((function(_this) {\n        return function() {\n          var ref3, results, source, target;\n          ref3 = _this._options.http2.routes;\n          results = [];\n          for (source in ref3) {\n            target = ref3[source];\n            results.push(_this._bindings().http2(source, target));\n          }\n          return results;\n        };\n      })(this), 1);\n    }\n  }\n\n  WebProxy.prototype._parseSource = function(req, protocol, hostname, port) {\n    var chunks, source;\n    source = parse_url(req.url);\n    source.protocol = protocol;\n    source.host = req.headers.host;\n    if (source.host) {\n      chunks = source.host.split(':');\n    } else {\n      chunks = [hostname, port];\n    }\n    source.hostname = chunks[0];\n    source.port = chunks[1] || null;\n    source.href = source.protocol + \"//\" + source.host + source.path;\n    source.slashes = true;\n    return source;\n  };\n\n  WebProxy.prototype._parseHostPort = function(options, defaulthost, defaultport) {\n    var chunks, result;\n    result = {\n      port: defaultport,\n      hostname: defaulthost\n    };\n    if (options.port != null) {\n      if (typeof options.port === 'string' && options.port.indexOf(':') !== -1) {\n        chunks = options.port.split(':');\n        result.hostname = chunks[0];\n        result.port = chunks[1];\n      } else {\n        result.port = options.port;\n      }\n    }\n    if (options.hostname != null) {\n      if (typeof options.hostname === 'string' && options.hostname.indexOf(':') !== -1) {\n        chunks = options.hostname.split(':');\n        result.hostname = chunks[0];\n        result.port = chunks[1];\n      } else {\n        result.hostname = options.hostname;\n      }\n    }\n    return result;\n  };\n\n  WebProxy.prototype._translateUrl = function(mount, target, url) {\n    mount = parse_url(mount);\n    target = parse_url(target);\n    url = parse_url(url);\n    return \"\" + target.pathname + url.path.slice(mount.pathname.length);\n  };\n\n  WebProxy.prototype._startHttp = function() {\n    var bind;\n    bind = this._parseHostPort(this._options.http, '0.0.0.0', 8080);\n    this._options.http.port = bind.port;\n    this._options.http.hostname = bind.hostname;\n    this._httpServer = http.createServer((function(_this) {\n      return function(req, res) {\n        req.source = _this._parseSource(req, 'http:', _this._options.http.hostname, _this._options.http.port);\n        return _this._bindings()._http.exec(req.source.href, req, res, _this._error404);\n      };\n    })(this));\n    if (this._options.http.websockets) {\n      this._options.log.notice('http server configured for websockets');\n      this._httpServer.on('upgrade', (function(_this) {\n        return function(req, socket, head) {\n          req.source = _this._parseSource(req, 'http:', _this._options.http.hostname, _this._options.http.port);\n          return _this._bindings()._httpWs.exec(req.source.href, req, socket, head, _this._error404);\n        };\n      })(this));\n    }\n    this._httpServer.on('error', (function(_this) {\n      return function(err, req, res) {\n        if ((req != null) && (res != null)) {\n          _this._error500(req, res, err);\n        }\n        _this._options.log.error(err);\n        try {\n          if (res != null) {\n            return res.end();\n          }\n        } catch (_error) {}\n      };\n    })(this));\n    this._httpServer.listen(this._options.http.port, this._options.http.hostname);\n    return this._options.log.notice(\"http server listening on \" + this._options.http.hostname + \":\" + this._options.http.port);\n  };\n\n  WebProxy.prototype._startHttps = function() {\n    var bind;\n    this.certificates = new CertificateStore();\n    bind = this._parseHostPort(this._options.https, '0.0.0.0', 8443);\n    this._options.https.port = bind.port;\n    this._options.https.hostname = bind.hostname;\n    this._httpsServer = https.createServer(this.certificates.getHttpsOptions(this._options.https), (function(_this) {\n      return function(req, res) {\n        req.source = _this._parseSource(req, 'https:', _this._options.https.hostname, _this._options.https.port);\n        return _this._bindings()._https.exec(req.source.href, req, res, _this._error404);\n      };\n    })(this));\n    if (this._options.https.websockets) {\n      this._options.log.notice(\"https server configured for websockets\");\n      this._httpsServer.on('upgrade', (function(_this) {\n        return function(req, socket, head) {\n          req.source = _this._parseSource(req, 'https:', _this._options.https.hostname, _this._options.https.port);\n          return _this._bindings()._httpsWs.exec(req.source.href, req, socket, head, _this._error404);\n        };\n      })(this));\n    }\n    this._httpsServer.on('error', (function(_this) {\n      return function(err, req, res) {\n        if ((req != null) && (res != null)) {\n          _this._error500(req, res, err);\n        }\n        _this._options.log.error(err);\n        try {\n          if (res != null) {\n            return res.end();\n          }\n        } catch (_error) {}\n      };\n    })(this));\n    this._httpsServer.listen(this._options.https.port, this._options.https.hostname);\n    return this._options.log.notice(\"https server listening on \" + this._options.https.hostname + \":\" + this._options.https.port);\n  };\n\n  WebProxy.prototype._startHttp2 = function() {\n    var bind;\n    this.certificates = new CertificateStore();\n    bind = this._parseHostPort(this._options.http2, '0.0.0.0', 8443);\n    this._options.http2.port = bind.port;\n    this._options.http2.hostname = bind.hostname;\n    this._http2Server = http2.createServer(this.certificates.getHttpsOptions(this._options.http2), (function(_this) {\n      return function(req, res) {\n        var encrypted;\n        req.connection = encrypted = true;\n        req.source = _this._parseSource(req, 'https:', _this._options.http2.hostname, _this._options.http2.port);\n        return _this._bindings()._http2.exec(req.source.href, req, res, _this._error404);\n      };\n    })(this));\n    this._http2Server.on('error', (function(_this) {\n      return function(err, req, res) {\n        if ((req != null) && (res != null)) {\n          _this._error500(req, res, err);\n        }\n        _this._options.log.error(err);\n        try {\n          if (res != null) {\n            return res.end();\n          }\n        } catch (_error) {}\n      };\n    })(this));\n    this._http2Server.listen(this._options.http2.port, this._options.http2.hostname);\n    return this._options.log.notice(\"http2 server listening on \" + this._options.http2.hostname + \":\" + this._options.http2.port);\n  };\n\n  WebProxy.prototype._startProxy = function() {\n    this._proxy = http_proxy.createProxyServer(this._options.proxy);\n    this._proxy.on('proxyReq', (function(_this) {\n      return function(p, req, res, options) {\n        var ref;\n        if ((ref = _this._options.proxy) != null ? ref.keepAlive : void 0) {\n          p.setHeader('connection', 'keep-alive');\n        }\n        if (req.host != null) {\n          return p.setHeader('host', req.host);\n        }\n      };\n    })(this));\n    this._proxy.on('proxyRes', (function(_this) {\n      return function(p, req, res) {\n        if (req.httpVersionMajor === 2) {\n          return delete p.headers.connection;\n        }\n      };\n    })(this));\n    return this._proxy.on('error', (function(_this) {\n      return function(err, req, res) {\n        if ((req != null) && (typeof res === \"function\" ? res(!res.headersSent) : void 0)) {\n          _this._error500(req, res, err);\n        }\n        _this._options.log.error(err);\n        try {\n          if (res != null) {\n            return res.end();\n          }\n        } catch (_error) {}\n      };\n    })(this));\n  };\n\n  WebProxy.prototype.proxy = function(target) {\n    return (function(_this) {\n      return function(mount, url, req, res, next) {\n        var t;\n        t = target;\n        if ((t != null) && t.indexOf('http://') !== 0 && t.indexOf('https://') !== 0) {\n          t = \"http://\" + t;\n        }\n        if (t == null) {\n          t = req.target;\n        }\n        if (t == null) {\n          return next();\n        }\n        url = _this._translateUrl(mount, t, url);\n        _this._options.log.notice(mount + \" proxy \" + req.url + \" url\");\n        req.url = url;\n        return _this._proxy.web(req, res, {\n          target: t\n        });\n      };\n    })(this);\n  };\n\n  WebProxy.prototype.proxyWs = function(target) {\n    return (function(_this) {\n      return function(mount, url, req, socket, head, next) {\n        var t;\n        t = target;\n        if ((t != null) && t.indexOf('http://') !== 0 && t.indexOf('https://') !== 0) {\n          t = \"http://\" + t;\n        }\n        if (t == null) {\n          t = req.target;\n        }\n        if (t == null) {\n          return next();\n        }\n        url = _this._translateUrl(mount, t, url);\n        _this._options.log.notice(mount + \" proxy \" + req.url + \" url\");\n        req.url = url;\n        return _this._proxy.ws(req, socket, head, {\n          target: t\n        });\n      };\n    })(this);\n  };\n\n  WebProxy.prototype.setHost = function(host) {\n    return (function(_this) {\n      return function() {\n        var args, i, mount, next, req, url;\n        mount = arguments[0], url = arguments[1], req = arguments[2], args = 5 <= arguments.length ? slice.call(arguments, 3, i = arguments.length - 1) : (i = 3, []), next = arguments[i++];\n        req.host = host;\n        return next();\n      };\n    })(this);\n  };\n\n  WebProxy.prototype.loadBalancer = function(options) {\n    return new LoadBalancer(options);\n  };\n\n  WebProxy.prototype.sslRedirect = function(port) {\n    return (function(_this) {\n      return function(mount, url, req, res, next) {\n        var target;\n        target = parse_url(req.url);\n        if (port != null) {\n          target.port = port;\n        }\n        if (_this._options.https.port != null) {\n          target.port = _this._options.https.port;\n        }\n        target.hostname = req.source.hostname;\n        target.protocol = 'https:';\n        res.writeHead(302, {\n          Location: format_url(target)\n        });\n        return res.end();\n      };\n    })(this);\n  };\n\n  WebProxy.prototype.cors = function(allowedHosts) {\n    return (function(_this) {\n      return function(mount, url, req, res, next) {\n        var referer;\n        referer = req.headers.referer;\n        if (referer == null) {\n          return next();\n        }\n        referer = parse_url(referer);\n        referer = format_url({\n          protocol: referer.protocol,\n          hostname: referer.hostname,\n          port: referer.port\n        });\n        if (indexOf.call(allowedHosts, referer) < 0) {\n          return next();\n        }\n        res.setHeader('Access-Control-Allow-Origin', referer);\n        res.setHeader('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n        return next();\n      };\n    })(this);\n  };\n\n  WebProxy.prototype._error404 = function(req, res) {\n    var result;\n    result = {\n      message: \"No http proxy setup for \" + req.source.href\n    };\n    res.writeHead(404, {\n      'Content-Type': 'application/json'\n    });\n    res.write(JSON.stringify(result, null, 2));\n    return res.end();\n  };\n\n  WebProxy.prototype.error404 = function() {\n    return (function(_this) {\n      return function(mount, url, req, res, next) {\n        return _this._error404(req, res);\n      };\n    })(this);\n  };\n\n  WebProxy.prototype._error500 = function(req, res, err) {\n    var result;\n    result = {\n      message: \"Internal error for \" + req.source.href,\n      error: err\n    };\n    res.writeHead(500, {\n      'Content-Type': 'application/json'\n    });\n    res.write(JSON.stringify(result, null, 2));\n    return res.end();\n  };\n\n  WebProxy.prototype.error500 = function() {\n    return (function(_this) {\n      return function(mount, url, req, res, next) {\n        return _this._error500(req, res, '');\n      };\n    })(this);\n  };\n\n  WebProxy.prototype._redirectParseUrl = function(url) {\n    if (url.indexOf('http://') !== 0 && url.indexOf('https://') !== 0) {\n      url = \"http://\" + url;\n    }\n    return url;\n  };\n\n  WebProxy.prototype._redirect = function(req, res, code, location) {\n    res.writeHead(code, {\n      Location: location\n    });\n    return res.end();\n  };\n\n  WebProxy.prototype._redirect301absolute = function(req, res, location) {\n    return this._redirect(req, res, 301, this._redirectParseUrl(location));\n  };\n\n  WebProxy.prototype.redirect301absolute = function(location) {\n    return (function(_this) {\n      return function(mount, url, req, res, next) {\n        return _this._redirect(req, res, 301, _this._redirectParseUrl(location));\n      };\n    })(this);\n  };\n\n  WebProxy.prototype._redirect302absolute = function(req, res, location) {\n    return this._redirect(req, res, 302, this._redirectParseUrl(location));\n  };\n\n  WebProxy.prototype.redirect302absolute = function(location) {\n    return (function(_this) {\n      return function(mount, url, req, res, next) {\n        return _this._redirect(req, res, 302, _this._redirectParseUrl(location));\n      };\n    })(this);\n  };\n\n  WebProxy.prototype._redirectParseRel = function(location, url) {\n    var target;\n    target = this._redirectParseUrl(location);\n    target += url;\n    return target;\n  };\n\n  WebProxy.prototype._redirect301 = function(req, res, location) {\n    return this._redirect(req, res, 301, this._redirectParseRel(location, req.url));\n  };\n\n  WebProxy.prototype.redirect301 = function(location) {\n    return (function(_this) {\n      return function(mount, url, req, res, next) {\n        return _this._redirect(req, res, 301, _this._redirectParseRel(location, req.url));\n      };\n    })(this);\n  };\n\n  WebProxy.prototype._redirect302 = function(req, res, location) {\n    return this._redirect(req, res, 302, this._redirectParseRel(location, req.url));\n  };\n\n  WebProxy.prototype.redirect302 = function(location) {\n    return (function(_this) {\n      return function(mount, url, req, res, next) {\n        return _this._redirect(req, res, 302, _this._redirectParseRel(location, req.url));\n      };\n    })(this);\n  };\n\n  WebProxy.prototype.close = function(cb) {\n    if (this._httpServer != null) {\n      this._httpServer.close();\n    }\n    if (this._httpsServer != null) {\n      this._httpsServer.close();\n    }\n    if (this._http2Server != null) {\n      this._http2Server.close();\n    }\n    if (this._proxy != null) {\n      this._proxy.close();\n    }\n    if (cb != null) {\n      return cb();\n    }\n  };\n\n  return WebProxy;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-redwire/node_modules/redwire/src/certificate-store.js":"// Generated by CoffeeScript 1.4.0\n(function() {\n  var CertificateStore, crypto, fs, tls,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  fs = require('fs');\n\n  tls = require('tls');\n\n  crypto = require('crypto');\n\n  module.exports = CertificateStore = (function() {\n\n    function CertificateStore() {\n      this._getCertData = __bind(this._getCertData, this);\n\n      this._getCertBundleData = __bind(this._getCertBundleData, this);\n\n      this.getTlsOptions = __bind(this.getTlsOptions, this);\n\n      this.getHttpsOptions = __bind(this.getHttpsOptions, this);\n\n      this.isAvailable = __bind(this.isAvailable, this);\n\n      this.add = __bind(this.add, this);\n      this._certs = {};\n      this._secureContexts = {};\n    }\n\n    CertificateStore.prototype.add = function(hostname, options) {\n      var scOpts;\n      scOpts = {\n        key: this._getCertData(options.key),\n        cert: this._getCertData(options.cert)\n      };\n      if (options.ca) {\n        scOpts.ca = this._getCertBundleData(options.ca);\n      }\n      return this._secureContexts[hostname] = tls.createSecureContext(scOpts);\n    };\n\n    CertificateStore.prototype.isAvailable = function(hostname) {\n      return this._secureContexts[hostname] != null;\n    };\n\n    CertificateStore.prototype.getHttpsOptions = function(options) {\n      var result,\n        _this = this;\n      result = {\n        SNICallback: function(hostname, callback) {\n          return callback(null, _this._secureContexts[hostname]);\n        },\n        key: this._getCertData(options.key),\n        cert: this._getCertData(options.cert)\n      };\n      if (options.ca) {\n        result.ca = [this._getCertData(options.ca)];\n      }\n      return result;\n    };\n\n    CertificateStore.prototype.getTlsOptions = function(options) {\n      var result;\n      result = {\n        key: this._getCertData(options.key),\n        cert: this._getCertData(options.cert)\n      };\n      if (options.ca) {\n        result.ca = [this._getCertData(options.ca)];\n      }\n      return result;\n    };\n\n    CertificateStore.prototype._getCertBundleData = function(pathname) {\n      var ca, cert, chain, line, _i, _len;\n      ca = [];\n      chain = fs.readFileSync(pathname, 'utf8');\n      chain = chain.split('\\n');\n      cert = [];\n      for (_i = 0, _len = chain.length; _i < _len; _i++) {\n        line = chain[_i];\n        if (line.length === 0) {\n          continue;\n        }\n        cert.push(line);\n        if (line.match(/-END CERTIFICATE-/)) {\n          ca.push(cert.join('\\n'));\n          cert = [];\n        }\n      }\n      return ca;\n    };\n\n    CertificateStore.prototype._getCertData = function(pathname) {\n      var path, _i, _len, _results;\n      if (pathname) {\n        if (pathname instanceof Array) {\n          _results = [];\n          for (_i = 0, _len = pathname.length; _i < _len; _i++) {\n            path = pathname[_i];\n            _results.push(this._getCertData(path));\n          }\n          return _results;\n        } else if (fs.existsSync(pathname)) {\n          return fs.readFileSync(pathname, 'utf8');\n        }\n      }\n    };\n\n    return CertificateStore;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-redwire/node_modules/redwire/src/load-balancer.js":"// Generated by CoffeeScript 1.8.0\nvar LoadBalancer,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nmodule.exports = LoadBalancer = (function() {\n  function LoadBalancer(options) {\n    this.distribute = __bind(this.distribute, this);\n    this.next = __bind(this.next, this);\n    this.remove = __bind(this.remove, this);\n    this.add = __bind(this.add, this);\n    this._options = {\n      method: 'roundrobin'\n    };\n    if ((options != null ? options.method : void 0) != null) {\n      this._options.method = options.method;\n    }\n    this._servers = [];\n    this._index = 0;\n  }\n\n  LoadBalancer.prototype.add = function(target) {\n    if (target.indexOf('http://') !== 0 && target.indexOf('https://') !== 0) {\n      target = \"http://\" + target;\n    }\n    this._servers.push(target);\n    return this;\n  };\n\n  LoadBalancer.prototype.remove = function(target) {\n    if (target.indexOf('http://') !== 0 && target.indexOf('https://') !== 0) {\n      target = \"http://\" + target;\n    }\n    this._servers.remove(target);\n    return this;\n  };\n\n  LoadBalancer.prototype.next = function() {\n    var result;\n    this._index = this._index % this._servers.length;\n    result = this._servers[this._index];\n    this._index++;\n    return result;\n  };\n\n  LoadBalancer.prototype.distribute = function() {\n    return (function(_this) {\n      return function(mount, url, req, res, next) {\n        req.target = _this.next();\n        return next();\n      };\n    })(this);\n  };\n\n  return LoadBalancer;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-redwire/node_modules/redwire/src/tcp-proxy.js":"// Generated by CoffeeScript 1.9.2\nvar TcpProxy, net, parse_url, tls,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  slice = [].slice;\n\nnet = require('net');\n\ntls = require('tls');\n\nparse_url = require('url').parse;\n\nmodule.exports = TcpProxy = (function() {\n  function TcpProxy(options, bindings) {\n    this.close = bind(this.close, this);\n    this.tlsError = bind(this.tlsError, this);\n    this._tlsError = bind(this._tlsError, this);\n    this.tcpError = bind(this.tcpError, this);\n    this._tcpError = bind(this._tcpError, this);\n    this.proxyTls = bind(this.proxyTls, this);\n    this.proxyTcp = bind(this.proxyTcp, this);\n    this._startTls = bind(this._startTls, this);\n    this._startTcp = bind(this._startTcp, this);\n    var ref, ref1;\n    this._options = options;\n    this._bindings = bindings;\n    if (this._options.tcp) {\n      this._startTcp();\n    }\n    if (this._options.tls) {\n      this._startTls();\n    }\n    if (((ref = this._options.tcp) != null ? ref.dest : void 0) != null) {\n      setTimeout((function(_this) {\n        return function() {\n          return _this._bindings().tcp(_this._options.tcp.dest);\n        };\n      })(this), 1);\n    }\n    if (((ref1 = this._options.tls) != null ? ref1.dest : void 0) != null) {\n      setTimeout((function(_this) {\n        return function() {\n          return _this._bindings().tls(_this._options.tls.dest);\n        };\n      })(this), 1);\n    }\n  }\n\n  TcpProxy.prototype._startTcp = function() {\n    this._tcpServer = net.createServer((function(_this) {\n      return function(socket) {\n        socket.on('error', function() {\n          var args, ref;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return (ref = _this._tcpServer).emit.apply(ref, ['error'].concat(slice.call(args)));\n        });\n        return _this._bindings()._tcp.exec({}, socket, _this.tcpError('No rules caught tcp connection'));\n      };\n    })(this));\n    this._tcpServer.on('error', this._options.log.error);\n    this._tcpServer.listen(this._options.tcp.port);\n    return this._options.log.notice(\"tcp server listening on port \" + this._options.tcp.port);\n  };\n\n  TcpProxy.prototype._startTls = function() {\n    this._tlsServer = tls.createServer(this.certificates.getTlsOptions(this._options.tls), (function(_this) {\n      return function(socket) {\n        socket.on('error', function() {\n          var args, ref;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return (ref = _this._tlsServer).emit.apply(ref, ['error'].concat(slice.call(args)));\n        });\n        return _this._bindings()._tls.exec({}, socket, _this.tlsError('No rules caught tls connection'));\n      };\n    })(this));\n    this._tlsServer.on('error', this._options.log.error);\n    this._tlsServer.listen(this._options.tls.port);\n    return this._options.log.notice(\"tls server listening on port \" + this._options.tls.port);\n  };\n\n  TcpProxy.prototype.proxyTcp = function(target) {\n    return (function(_this) {\n      return function(req, socket, next) {\n        var proxySock, t, url;\n        t = target;\n        if (t == null) {\n          t = req.target;\n        }\n        if ((t != null) && typeof t === 'string' && t.indexOf('tcp://')) {\n          t = \"tcp://\" + t;\n        }\n        if (t == null) {\n          return next();\n        }\n        url = parse_url(t);\n        url = {\n          host: url.hostname,\n          port: url.port\n        };\n        proxySock = net.connect(url).on('error', function() {\n          var args, ref;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return (ref = _this._tcpServer).emit.apply(ref, ['error'].concat(slice.call(args)));\n        }).on('end', function() {\n          return socket.end();\n        });\n        proxySock.pipe(socket).pipe(proxySock);\n        return socket.on('end', function() {\n          return proxySock.end();\n        });\n      };\n    })(this);\n  };\n\n  TcpProxy.prototype.proxyTls = function(options, target) {\n    return (function(_this) {\n      return function(req, socket, next) {\n        var proxySock, t, url;\n        if (target == null) {\n          target = options;\n          options = null;\n        }\n        t = target;\n        if (t == null) {\n          t = req.target;\n        }\n        if ((t != null) && t.indexOf('tls://')) {\n          t = \"tls://\" + t;\n        }\n        if (t == null) {\n          return next();\n        }\n        if (options == null) {\n          options = req;\n        }\n        url = parse_url(t);\n        url = {\n          host: url.hostname,\n          port: url.port\n        };\n        proxySock = tls.connect(options, url).on('error', function() {\n          var args, ref;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return (ref = _this._tlsServer).emit.apply(ref, ['error'].concat(slice.call(args)));\n        });\n        return proxySock.pipe(socket).pipe(proxySock);\n      };\n    })(this);\n  };\n\n  TcpProxy.prototype._tcpError = function(req, socket, message) {\n    this._options.log.error(message);\n    return socket.destroy();\n  };\n\n  TcpProxy.prototype.tcpError = function(message) {\n    return (function(_this) {\n      return function(req, socket, next) {\n        return _this._tcpError(req, socket, message);\n      };\n    })(this);\n  };\n\n  TcpProxy.prototype._tlsError = function(req, socket, message) {\n    this._options.log.error(message);\n    return socket.destroy();\n  };\n\n  TcpProxy.prototype.tlsError = function(message) {\n    return (function(_this) {\n      return function(req, socket, next) {\n        return _this._tlsError(req, socket, message);\n      };\n    })(this);\n  };\n\n  TcpProxy.prototype.close = function(cb) {\n    if (this._tcpServer != null) {\n      this._tcpServer.close();\n    }\n    if (this._tlsServer != null) {\n      this._tlsServer.close();\n    }\n    if (cb != null) {\n      return cb();\n    }\n  };\n\n  return TcpProxy;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-redwire/node_modules/redwire/src/testhttp.js":"// Generated by CoffeeScript 1.8.0\nvar args, http, os, port, server;\n\nos = require('os');\n\nhttp = require('http');\n\nargs = process.argv.slice(2);\n\nport = args[0];\n\nserver = http.createServer(function(req, res) {\n  var result;\n  process.stdout.write('.');\n  result = {\n    server: os.hostname(),\n    port: port,\n    host: req.headers['host'],\n    method: req.method,\n    url: req.url\n  };\n  return res.end(JSON.stringify(result, null, 2));\n});\n\nserver.listen(port, function() {\n  return console.log(\"Home grown http server running on port \" + port);\n});\n"}